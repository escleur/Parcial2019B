/*
 ============================================================================
 Name        : parcial2019B.c
 Author      : Sanjurjo Gabriel Alejandro
 Version     :
 Copyright   :
 Description :
 ============================================================================
 */

#include <stdio.h>
#include <stdio_ext.h>
#include <stdlib.h>
#include <string.h>

#include "Cliente.h"
#include "Pedido.h"
#include "Informe.h"
#include "utn.h"
#include "UI.h"

void clienteCargaForzada(Cliente *list, int len);
void pedidoCargaForzada(Pedido *list, int len);

int main(void) {
	Cliente aClientes[QTY_CLIENTES];
	Pedido aPedidos[QTY_PEDIDOS];
	int opcion;
	char opcion2;
	cliente_InitLugarLibre(aClientes, QTY_CLIENTES);
	pedido_InitLugarLibre(aPedidos, QTY_PEDIDOS);
	clienteCargaForzada(aClientes,QTY_CLIENTES);
	pedidoCargaForzada(aPedidos, QTY_PEDIDOS);
	do {
		printf( "1. Alta de cliente\n"
				"2. Modificacion de clientes\n"
				"3. Baja de cliente\n"
				"4. Pedido de recoleccion\n"
				"5. Procesar residuos\n"
				"6. Listado clientes con sus pendientes\n"
				"7. Listado de pedidos pendientes\n"
				"8. Listado de pedidos procesados\n"
				"9. Informes\n"
				"0. Salir\n");
		getInt(&opcion, "Ingrese la opcion\n", "Error\n", 0, 11, 2);
		switch(opcion)
		{
		case 1:
			cliente_UIAlta(aClientes, QTY_CLIENTES);
			break;
		case 2:
			cliente_UIModificacion(aClientes, QTY_CLIENTES);
			break;
		case 3:
			cliente_UIBaja(aClientes, QTY_CLIENTES);
			break;
		case 4:
			pedido_UIAlta(aPedidos , QTY_PEDIDOS, aClientes , QTY_CLIENTES);
			//cliente_ImprimirArray(aClientes, QTY_CLIENTES);
			break;
		case 5:
			pedido_UIModificacion(aPedidos, QTY_PEDIDOS);
			break;
		case 6:
			cliente_ImprimirArrayConPendientes(aClientes , QTY_CLIENTES, aPedidos, QTY_PEDIDOS);
			break;
		case 7:
			pedido_ImprimirArrayPendiente(aClientes , QTY_CLIENTES, aPedidos, QTY_PEDIDOS);
			break;
		case 8:
			pedido_ImprimirArrayProcesado(aClientes , QTY_CLIENTES, aPedidos, QTY_PEDIDOS);
			break;
		case 9:
			printf( "a. Informe cliente con mas pedidos pendientes\n"
					"b. Informe cliente con mas pedidos completados\n"
					"c. Informe cliente con mas pedidos\n"
					"d. Informe cliente con mas kilos reciclados\n"
					"e. Informe cliente con menos kilos reciclados\n"
					"f. Informe clientes con mas de 1000 kilos reciclados\n"
					"g. Informe clientes con menos de 100 kilos reciclados\n"
					"h. Informe pedidos completados con porcentaje de reciclado\n"
					"i. \n"
					"j. \n"
					"k. \n"
					"\n");
			getChar(&opcion2, "Ingrese la opcion\n", "Error\n", 'a', 'h', 2);
			switch(opcion2)
			{
			case 'a':
				cliente_ConMasPedidosPendientes(aClientes, QTY_CLIENTES, aPedidos, QTY_PEDIDOS);
				break;
			case 'b':
				cliente_ConMasPedidosCompletados(aClientes, QTY_CLIENTES, aPedidos, QTY_PEDIDOS);
				break;
			case 'c':
				cliente_ConMasPedidos(aClientes, QTY_CLIENTES, aPedidos, QTY_PEDIDOS);

				break;
			case 'd':
				cliente_ConMasReciclado(aClientes, QTY_CLIENTES, aPedidos, QTY_PEDIDOS);

				break;
			case 'e':
				cliente_ConMenosReciclado(aClientes, QTY_CLIENTES, aPedidos, QTY_PEDIDOS);

				break;
			case 'f':
				cliente_ConMasDe1000Reciclado(aClientes, QTY_CLIENTES, aPedidos, QTY_PEDIDOS);
				break;
			case 'g':
				cliente_ConMenosDe100Reciclado(aClientes, QTY_CLIENTES, aPedidos, QTY_PEDIDOS);
				break;
			case 'h':
				pedido_CompletadosConPorcentageReciclado(aClientes, QTY_CLIENTES, aPedidos, QTY_PEDIDOS);
				break;
			case 'i':
				cliente_(aClientes, QTY_CLIENTES, aPedidos, QTY_PEDIDOS);
				break;
			case 'j':
				pedido_(aClientes, QTY_CLIENTES, aPedidos, QTY_PEDIDOS);
				break;
			}
			break;

		}
	}while(opcion!=0);
	return 0;
}
/**
 * \brief Carga forzada de datos para la entidad Cliente
 * \param list Cliente*
 * \param len int
 */
void clienteCargaForzada(Cliente *list, int len)
{
	char aNombre[][QTY_CARACTERES]={"Telefonica","DATASOFT","NESTLE","TERRABUSI","DIA","QUILMES"};
	char aCuit[][QTY_CARACTERES]={"30-11223344-5","30-44556677-6","30-88995521-9","30-56781423-5","31-54581253-3","30-51485759-6"};
	char aDireccion[][QTY_CARACTERES]={"Lima 1234","Corrientes 2547","cucha cucha 555","rocha 784","Mitre 750","rocha 741"};
	char aLocalidad[][QTY_CARACTERES]={"CABA","CABA","LANUS","QUILMES","AVELLANEDA","QUILMES"};
	Cliente buffer;
	int i;
	for(i=0;i<6;i++){
		strncpy(buffer.nombre,aNombre[i],QTY_CARACTERES);
		strncpy(buffer.cuit,aCuit[i],QTY_CARACTERES);
		strncpy(buffer.direccion,aDireccion[i],QTY_CARACTERES);
		strncpy(buffer.localidad,aLocalidad[i],QTY_CARACTERES);

		cliente_AltaPorId(list, len, buffer);
	}

}

/**
 * \brief Carga forzada de datos para la entidad Pedido
 * \param list Pedido*
 * \param len int
 */
void pedidoCargaForzada(Pedido *list, int len)
{
	int aIdCliente[]={1,1,2,2,3,4,1,5,6};
	int aCantidad[]={1000,800,100,300,1500,750,200,30,456};
	int aClaseA[]={200,210,0,0,500,100,0,10,0};
	int aClaseB[]={145,45,0,0,150,50,0,5,0};
	int aClaseC[]={230,30,0,0,270,70,0,3,0};
	char aEstado[][QTY_CARACTERES]={"Completado","Completado","Pendiente","Pendiente","Completado","Completado","Pendiente","Completado","Pendiente"};
	Pedido buffer;
	int i;
	for(i=0;i<11;i++){
		buffer.cantidad = aCantidad[i];
		strncpy(buffer.estado,aEstado[i],QTY_CARACTERES);
		buffer.claseA = aClaseA[i];
		buffer.claseB = aClaseB[i];
		buffer.claseC = aClaseC[i];
		buffer.idCliente = aIdCliente[i];
		pedido_AltaPorId(list, len, buffer);
	}

}



