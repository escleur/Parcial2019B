/*
 * Informe.c
 *
 *  Created on: Oct 11, 2019
 *      Author: gabriel
 */
#include "Informe.h"


/**
 * \brief Cuenta los pedidos de un cliente en estado Pendiente
 * \param list Pedido*
 * \param len int
 * \param idCliente int
 * \return (-1)si puntero NULL o parametros incorrectos (>= 0) cantidad correspondiente
 */

int pedido_contarPendientesPorCliente(Pedido *list,int len, int idCliente)
{
	int retorno = -1;
	int i;
	int contador = 0;
	if(list != NULL && len >= 0 && idCliente >= 0){
		for(i=0; i<len; i++){
			if(list[i].isEmpty == FALSE && list[i].idCliente == idCliente && strncmp(list[i].estado,"Pendiente",50)==0){
				contador++;
			}
		}
		retorno = contador;
	}

	return retorno;
}

/** \brief Imprime los elementos en el array.
*
* \param list Cliente*
* \param len int
* \return int Retorna (-1) si Error [longitud invalida o
*  puntero NULL] - (0) si Ok
*
*/
int cliente_ImprimirArrayConPendientes(Cliente *list, int len, Pedido *list2, int len2)
{
	int i;
	int retorno = -1;
	if(list != NULL && len>0)
	{
		retorno = 0;
		printf("id     Nombre    Cuit    Direccion   Localidad     Cantidad de Pendientes\n");
		for(i=0;i<len;i++)
		{
			if(list[i].isEmpty == FALSE){
				printf("%d -- %s -- %s -- %s -- %s -- %d \n",list[i].id,list[i].nombre,list[i].cuit,list[i].direccion,list[i].localidad,pedido_contarPendientesPorCliente(list2, len2, list[i].id));
			}

		}
	}
	return retorno;
}


/** \brief Imprime los elementos en el array.
*
* \param list Cliente*
* \param len int
* \return int Retorna (-1) si Error [longitud invalida o
*  puntero NULL] - (0) si Ok
*
*/
int pedido_ImprimirArrayPendientes(Cliente *list, int len, Pedido *list2, int len2)
{
	int i;
	int retorno = -1;
	Cliente buffer;
	if(list != NULL && len>0)
	{
		retorno = 0;
		printf("id     Nombre    Cuit    Direccion   Localidad     Cantidad de Pendientes\n");
		for(i=0;i<len2;i++)
		{
			if(list2[i].isEmpty == FALSE && strncmp(list2[i].estado,"Pendiente", 50) == 0 ){
				buffer.id = list2[i].idCliente;
				cliente_GetPorId(list, len, &buffer);
				printf("%s -- %s -- %s -- %s -- %d \n",buffer.cuit,buffer.direccion,list2[i].cantidad);
			}

		}
	}
	return retorno;
}
